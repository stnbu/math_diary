
Polynomial-Line Intersections
=============================

.. post:: Feb 02, 2022
   :tags:
   :category: Elliptic Tales

Knowing full-well that such things are already out there, I created a `python package <https://github.com/stnbu/polynomier>`_ to model polynomials.

My bigger goal is to wade my way through `Elliptic Tales <https://press.princeton.edu/books/hardcover/9780691151199/elliptic-tales>`_, a "popular mathematics" book that identifies as a graduate-level text book. It's a slog. :sub:`*`

I'll consider this the first post in a series about the book. As this is called "Math Diary", there is no ``math`` tag. It's all math. Isn't it?

So I won't feel too bad if occasionally I find myself writing multiple posts and new tools in order to comprehend
this material. I wasn't aware of this until just recently: writing python to model mathematical ideas is just the thing for upping my comprehension game and actually, counter-intuitively, making the going easier...and more enjoyable.

Using the above-mentioned library, I was able (victory!) to model the parameterized line equation substitution featured on p73:

.. include:: 1643834463_files/curve-line_intersect.py
   :literal:

whose output is

.. program-output:: python3 1643834463_files/curve-line_intersect.py

Pretty neat, eh?

The text chose this parameterization (L) such that ``g(0) = f(ξ, η) = 0``. What happens if we change ``g``? The fact that they intersect implies that ``g`` has no constant terms. Let's see if we can break that...

.. include:: 1643834463_files/curve-line_nointersect.py
   :literal:

outputs
      
.. program-output:: python3 1643834463_files/curve-line_nointersect.py

Oops! A constant term!

Let's take a look at the plot of both equations. Using the sympy snippet

.. include:: 1643834463_files/et_p73_exercise.py
   :literal:

whose plot looks like

.. program-output:: python3 1643834463_files/et_p73_exercise.py

.. raw:: html
   :file: 1643834463_files/et_p73_exercise.py.svg

Since *intersecting* is key, it looks like we could just negate the line's slope and still get no constant terms. Let us see...

.. include:: 1643834463_files/curve-line_intersect_negslope.py
   :literal:

which outputs

.. program-output:: python3 1643834463_files/curve-line_intersect_negslope.py

Indeed, still no constant term. It also looks like we could slide it up just a bit

and...

still no constant terms.

The next page and a half gets pretty deep for my waders. I hope *deriving* polynomial composition will make the going more intuitive.

----

| :sup:`*` Historians will note I started out with `this text <http://www.hyperelliptic.org/HEHCC/>`_ but then found I had to immediately downshift to a "primer" on the topic.